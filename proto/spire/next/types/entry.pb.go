// Code generated by protoc-gen-go. DO NOT EDIT.
// source: entry.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Entry struct {
	// Globally unique ID for the entry.
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// The SPIFFE ID of the identity described by this entry.
	SpiffeId string `protobuf:"bytes,3,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// TODO: Who the entry is delegated to. If the entry describes a node, this is
	// set to the SPIFFE ID of the SPIRE server of the trust domain (e.g.
	// spiffe://example.org/spire/server). Otherwise, it will be set to a node
	// SPIFFE ID.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// The selectors which identify which entities match this entry. If this is
	// an entry for a node, these selectors represent selectors produced by
	// node attestation. Otherwise, these selectors represent those produced by
	// workload attestation.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// The time to live for identities issued for this entry.
	Ttl int32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// A list of trust domains the identity described by this entry federates
	// with.
	FederatesWith []string `protobuf:"bytes,5,rep,name=federates_with,json=federatesWith,proto3" json:"federates_with,omitempty"`
	// Whether or not the identity described by this entry is an administrative
	// workload. Administrative workloads are granted additional access to
	// various managerial server APIs, such as entry registration.
	Admin bool `protobuf:"varint,7,opt,name=admin,proto3" json:"admin,omitempty"`
	// Whether or not the identity described by this entry represents a
	// downstream SPIRE server. Downstream SPIRE servers have additional access
	// to various signing APIs, such as those used to sign X.509 CA
	// certificates and publish JWT signing keys.
	Downstream bool `protobuf:"varint,8,opt,name=downstream,proto3" json:"downstream,omitempty"`
	// When the entry expires (seconds since Unix epoch).
	ExpiresAt int64 `protobuf:"varint,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// A list of DNS names associated with the identity described by this entry.
	DnsNames             []string `protobuf:"bytes,10,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_daa6c5b6c627940f, []int{0}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *Entry) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Entry) GetSelectors() []*Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *Entry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Entry) GetFederatesWith() []string {
	if m != nil {
		return m.FederatesWith
	}
	return nil
}

func (m *Entry) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *Entry) GetDownstream() bool {
	if m != nil {
		return m.Downstream
	}
	return false
}

func (m *Entry) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *Entry) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

// Field mask for Entry fields
type EntryMask struct {
	// id field mask.
	Id bool `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	// spiffe_id field mask.
	SpiffeId bool `protobuf:"varint,3,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// delegated_to field mask.
	DelegatedTo bool `protobuf:"varint,2,opt,name=delegated_to,json=delegatedTo,proto3" json:"delegated_to,omitempty"`
	// selectors field mask.
	Selectors bool `protobuf:"varint,1,opt,name=selectors,proto3" json:"selectors,omitempty"`
	// ttl field mask.
	Ttl bool `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// federates_with field mask.
	FederatesWith bool `protobuf:"varint,5,opt,name=federates_with,json=federatesWith,proto3" json:"federates_with,omitempty"`
	// admin field mask.
	Admin bool `protobuf:"varint,7,opt,name=admin,proto3" json:"admin,omitempty"`
	// downstream field mask.
	Downstream bool `protobuf:"varint,8,opt,name=downstream,proto3" json:"downstream,omitempty"`
	// expires_at field mask.
	ExpiresAt bool `protobuf:"varint,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// dns_names field mask.
	DnsNames             bool     `protobuf:"varint,10,opt,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryMask) Reset()         { *m = EntryMask{} }
func (m *EntryMask) String() string { return proto.CompactTextString(m) }
func (*EntryMask) ProtoMessage()    {}
func (*EntryMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_daa6c5b6c627940f, []int{1}
}

func (m *EntryMask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryMask.Unmarshal(m, b)
}
func (m *EntryMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryMask.Marshal(b, m, deterministic)
}
func (m *EntryMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryMask.Merge(m, src)
}
func (m *EntryMask) XXX_Size() int {
	return xxx_messageInfo_EntryMask.Size(m)
}
func (m *EntryMask) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryMask.DiscardUnknown(m)
}

var xxx_messageInfo_EntryMask proto.InternalMessageInfo

func (m *EntryMask) GetId() bool {
	if m != nil {
		return m.Id
	}
	return false
}

func (m *EntryMask) GetSpiffeId() bool {
	if m != nil {
		return m.SpiffeId
	}
	return false
}

func (m *EntryMask) GetDelegatedTo() bool {
	if m != nil {
		return m.DelegatedTo
	}
	return false
}

func (m *EntryMask) GetSelectors() bool {
	if m != nil {
		return m.Selectors
	}
	return false
}

func (m *EntryMask) GetTtl() bool {
	if m != nil {
		return m.Ttl
	}
	return false
}

func (m *EntryMask) GetFederatesWith() bool {
	if m != nil {
		return m.FederatesWith
	}
	return false
}

func (m *EntryMask) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *EntryMask) GetDownstream() bool {
	if m != nil {
		return m.Downstream
	}
	return false
}

func (m *EntryMask) GetExpiresAt() bool {
	if m != nil {
		return m.ExpiresAt
	}
	return false
}

func (m *EntryMask) GetDnsNames() bool {
	if m != nil {
		return m.DnsNames
	}
	return false
}

func init() {
	proto.RegisterType((*Entry)(nil), "spire.types.Entry")
	proto.RegisterType((*EntryMask)(nil), "spire.types.EntryMask")
}

func init() { proto.RegisterFile("entry.proto", fileDescriptor_daa6c5b6c627940f) }

var fileDescriptor_daa6c5b6c627940f = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x91, 0x54, 0xb9, 0xab, 0x51, 0x6b, 0xca, 0xd2, 0x96, 0xa5, 0x7f, 0x55, 0x43, 0x41,
	0x27, 0xa9, 0xd4, 0x4f, 0xd0, 0x42, 0x0f, 0x3d, 0xb4, 0x07, 0xb5, 0x10, 0xc8, 0x45, 0xac, 0xbd,
	0x63, 0x7b, 0x89, 0xb5, 0x12, 0xda, 0x09, 0xb6, 0xdf, 0x27, 0xc7, 0x3c, 0x64, 0xd0, 0xca, 0x76,
	0x94, 0xe0, 0xe4, 0x96, 0x9b, 0xbe, 0xdf, 0xb7, 0x62, 0x77, 0x7e, 0x0c, 0xc4, 0x68, 0xa8, 0xdd,
	0x65, 0x4d, 0x5b, 0x53, 0xcd, 0x63, 0xdb, 0xe8, 0x16, 0x33, 0xda, 0x35, 0x68, 0xdf, 0x7d, 0x76,
	0x21, 0x37, 0xb8, 0xa5, 0xdc, 0x91, 0xdc, 0xe2, 0x1a, 0xe7, 0x54, 0xb7, 0xfd, 0xe9, 0xc9, 0xb5,
	0x0f, 0xe1, 0xaf, 0xee, 0x6f, 0x3e, 0x06, 0x5f, 0x2b, 0x31, 0x4a, 0xbc, 0x34, 0x2a, 0x7c, 0xad,
	0xf8, 0x7b, 0x88, 0x6c, 0xa3, 0x17, 0x0b, 0x2c, 0xb5, 0x12, 0x81, 0xc3, 0xac, 0x07, 0xbf, 0x15,
	0x7f, 0x0b, 0xa3, 0x46, 0xb6, 0x68, 0x48, 0xf8, 0xae, 0xd9, 0x27, 0x3e, 0x85, 0xe8, 0x70, 0x81,
	0x15, 0x5e, 0x12, 0xa4, 0xf1, 0xf7, 0x37, 0xd9, 0xe0, 0x41, 0xd9, 0xbf, 0x7d, 0x5b, 0xdc, 0x9e,
	0xe3, 0xaf, 0x20, 0x20, 0x5a, 0x8b, 0x67, 0x89, 0x97, 0x86, 0x45, 0xf7, 0xc9, 0xbf, 0xc2, 0x78,
	0x81, 0x0a, 0x5b, 0x49, 0x68, 0xcb, 0x8d, 0xa6, 0x95, 0x08, 0x93, 0x20, 0x8d, 0x8a, 0x97, 0x47,
	0x7a, 0xa6, 0x69, 0xc5, 0x5f, 0x43, 0x28, 0x55, 0xa5, 0x8d, 0x78, 0x9e, 0x78, 0x29, 0x2b, 0xfa,
	0xc0, 0x3f, 0x01, 0xa8, 0x7a, 0x63, 0x2c, 0xb5, 0x28, 0x2b, 0xc1, 0x5c, 0x35, 0x20, 0xfc, 0x23,
	0x00, 0x6e, 0xbb, 0x27, 0xd9, 0x52, 0x92, 0x88, 0x12, 0x2f, 0x0d, 0x8a, 0x68, 0x4f, 0x7e, 0x50,
	0x37, 0xb7, 0x32, 0xb6, 0x34, 0xb2, 0x42, 0x2b, 0xc0, 0x5d, 0xcb, 0x94, 0xb1, 0x7f, 0xbb, 0x3c,
	0xb9, 0xf2, 0x21, 0x72, 0xba, 0xfe, 0x48, 0x7b, 0x31, 0x50, 0xc6, 0x4e, 0x2b, 0x63, 0x03, 0x65,
	0x5f, 0xe0, 0x85, 0xc2, 0x35, 0x2e, 0x25, 0xa1, 0x2a, 0xa9, 0x76, 0xe2, 0x58, 0x11, 0x1f, 0xd9,
	0xff, 0x9a, 0x7f, 0xb8, 0x6b, 0xaf, 0xeb, 0x4f, 0x6b, 0x62, 0x0f, 0x6b, 0xea, 0xca, 0x27, 0xd2,
	0xc4, 0x1e, 0xd1, 0xe4, 0x66, 0x3d, 0x68, 0xfa, 0xf9, 0xed, 0x3c, 0x5b, 0x6a, 0x5a, 0x5d, 0xce,
	0xb2, 0x79, 0x5d, 0xe5, 0xbd, 0x82, 0xbc, 0x5f, 0x45, 0xb7, 0x76, 0xf9, 0xfd, 0xb5, 0x9c, 0x8d,
	0x1c, 0x9f, 0xde, 0x04, 0x00, 0x00, 0xff, 0xff, 0x56, 0xd9, 0xd9, 0xb8, 0xcb, 0x02, 0x00, 0x00,
}
