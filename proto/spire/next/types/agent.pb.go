// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Agent struct {
	// Output only. SPIFFE ID of the agent.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The method by which the agent attested.
	AttestationType string `protobuf:"bytes,2,opt,name=attestation_type,json=attestationType,proto3" json:"attestation_type,omitempty"`
	// Output only. The X509-SVID serial number.
	X509SvidSerialNumber string `protobuf:"bytes,3,opt,name=x509svid_serial_number,json=x509svidSerialNumber,proto3" json:"x509svid_serial_number,omitempty"`
	// Output only. The X509-SVID expiration (seconds since Unix epoch).
	X509SvidExpiresAt int64 `protobuf:"varint,4,opt,name=x509svid_expires_at,json=x509svidExpiresAt,proto3" json:"x509svid_expires_at,omitempty"`
	// Output only. The selectors attributed to the agent during attestation.
	Selectors []*Selector `protobuf:"bytes,5,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// Output only. Whether or not the agent is banned.
	Banned               bool     `protobuf:"varint,6,opt,name=banned,proto3" json:"banned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Agent) Reset()         { *m = Agent{} }
func (m *Agent) String() string { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()    {}
func (*Agent) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{0}
}

func (m *Agent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Agent.Unmarshal(m, b)
}
func (m *Agent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Agent.Marshal(b, m, deterministic)
}
func (m *Agent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agent.Merge(m, src)
}
func (m *Agent) XXX_Size() int {
	return xxx_messageInfo_Agent.Size(m)
}
func (m *Agent) XXX_DiscardUnknown() {
	xxx_messageInfo_Agent.DiscardUnknown(m)
}

var xxx_messageInfo_Agent proto.InternalMessageInfo

func (m *Agent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Agent) GetAttestationType() string {
	if m != nil {
		return m.AttestationType
	}
	return ""
}

func (m *Agent) GetX509SvidSerialNumber() string {
	if m != nil {
		return m.X509SvidSerialNumber
	}
	return ""
}

func (m *Agent) GetX509SvidExpiresAt() int64 {
	if m != nil {
		return m.X509SvidExpiresAt
	}
	return 0
}

func (m *Agent) GetSelectors() []*Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *Agent) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

type AgentMask struct {
	Id                   bool     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttestationType      bool     `protobuf:"varint,2,opt,name=attestation_type,json=attestationType,proto3" json:"attestation_type,omitempty"`
	X509SvidSerialNumber bool     `protobuf:"varint,3,opt,name=x509svid_serial_number,json=x509svidSerialNumber,proto3" json:"x509svid_serial_number,omitempty"`
	X509SvidExpiresAt    bool     `protobuf:"varint,4,opt,name=x509svid_expires_at,json=x509svidExpiresAt,proto3" json:"x509svid_expires_at,omitempty"`
	Selectors            bool     `protobuf:"varint,5,opt,name=selectors,proto3" json:"selectors,omitempty"`
	Banned               bool     `protobuf:"varint,6,opt,name=banned,proto3" json:"banned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentMask) Reset()         { *m = AgentMask{} }
func (m *AgentMask) String() string { return proto.CompactTextString(m) }
func (*AgentMask) ProtoMessage()    {}
func (*AgentMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{1}
}

func (m *AgentMask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentMask.Unmarshal(m, b)
}
func (m *AgentMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentMask.Marshal(b, m, deterministic)
}
func (m *AgentMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMask.Merge(m, src)
}
func (m *AgentMask) XXX_Size() int {
	return xxx_messageInfo_AgentMask.Size(m)
}
func (m *AgentMask) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMask.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMask proto.InternalMessageInfo

func (m *AgentMask) GetId() bool {
	if m != nil {
		return m.Id
	}
	return false
}

func (m *AgentMask) GetAttestationType() bool {
	if m != nil {
		return m.AttestationType
	}
	return false
}

func (m *AgentMask) GetX509SvidSerialNumber() bool {
	if m != nil {
		return m.X509SvidSerialNumber
	}
	return false
}

func (m *AgentMask) GetX509SvidExpiresAt() bool {
	if m != nil {
		return m.X509SvidExpiresAt
	}
	return false
}

func (m *AgentMask) GetSelectors() bool {
	if m != nil {
		return m.Selectors
	}
	return false
}

func (m *AgentMask) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func init() {
	proto.RegisterType((*Agent)(nil), "spire.types.Agent")
	proto.RegisterType((*AgentMask)(nil), "spire.types.AgentMask")
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor_56ede974c0020f77) }

var fileDescriptor_56ede974c0020f77 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4b, 0xfb, 0x30,
	0x14, 0xc7, 0xc9, 0xf6, 0xdb, 0xe8, 0x32, 0xf8, 0xa9, 0x51, 0x47, 0x10, 0xc1, 0xb2, 0x53, 0xbd,
	0x24, 0xc3, 0xe9, 0xc1, 0xe3, 0x04, 0x8f, 0x7a, 0xe8, 0x3c, 0x79, 0x29, 0xe9, 0xfa, 0x36, 0x83,
	0x5b, 0x5a, 0x9a, 0x37, 0xe9, 0xfe, 0x5d, 0xff, 0x07, 0xef, 0xd2, 0x74, 0xd5, 0x2a, 0xa2, 0xec,
	0x98, 0xf7, 0xf9, 0x7e, 0xe1, 0x7d, 0xc8, 0xa3, 0x7d, 0xb5, 0x00, 0x83, 0x22, 0xcb, 0x53, 0x4c,
	0x59, 0xdf, 0x66, 0x3a, 0x07, 0x81, 0x9b, 0x0c, 0xec, 0xc9, 0x99, 0x7b, 0x48, 0x03, 0x05, 0x4a,
	0x37, 0x91, 0x16, 0x96, 0x30, 0xc3, 0x34, 0xaf, 0xd2, 0xc3, 0x37, 0x42, 0x3b, 0x93, 0xb2, 0xcd,
	0xfe, 0xd3, 0x96, 0x4e, 0x38, 0xf1, 0x49, 0xd0, 0x0b, 0x5b, 0x3a, 0x61, 0xe7, 0x74, 0x5f, 0x21,
	0x82, 0x45, 0x85, 0x3a, 0x35, 0x51, 0xd9, 0xe6, 0x2d, 0x47, 0xf7, 0x1a, 0xf3, 0x87, 0x4d, 0x06,
	0xec, 0x92, 0x0e, 0x8a, 0xab, 0xd1, 0xb5, 0x7d, 0xd1, 0x49, 0x64, 0x21, 0xd7, 0x6a, 0x19, 0x99,
	0xf5, 0x2a, 0x86, 0x9c, 0xb7, 0x5d, 0xe1, 0xa8, 0xa6, 0x53, 0x07, 0xef, 0x1d, 0x63, 0x82, 0x1e,
	0x7e, 0xb4, 0xa0, 0x28, 0xf7, 0xb4, 0x91, 0x42, 0xfe, 0xcf, 0x27, 0x41, 0x3b, 0x3c, 0xa8, 0xd1,
	0x6d, 0x45, 0x26, 0xc8, 0xc6, 0xb4, 0x57, 0x2f, 0x6f, 0x79, 0xc7, 0x6f, 0x07, 0xfd, 0x8b, 0x63,
	0xd1, 0x90, 0x15, 0xd3, 0x2d, 0x0d, 0x3f, 0x73, 0x6c, 0x40, 0xbb, 0xb1, 0x32, 0x06, 0x12, 0xde,
	0xf5, 0x49, 0xe0, 0x85, 0xdb, 0xd7, 0xf0, 0x95, 0xd0, 0x9e, 0xf3, 0xbe, 0x53, 0xf6, 0xb9, 0xe1,
	0xee, 0xfd, 0xea, 0xee, 0xed, 0xea, 0xee, 0xed, 0xee, 0xee, 0xfd, 0xe4, 0x7e, 0xfa, 0xd5, 0xbd,
	0x4c, 0xfd, 0x2d, 0x79, 0x33, 0x7a, 0x14, 0x0b, 0x8d, 0x4f, 0xeb, 0x58, 0xcc, 0xd2, 0x95, 0xb4,
	0x99, 0x9e, 0xcf, 0x41, 0x56, 0x17, 0xe1, 0x7e, 0x5f, 0x7e, 0xbf, 0x8e, 0xb8, 0xeb, 0xe6, 0xe3,
	0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x75, 0xec, 0x3a, 0x52, 0x02, 0x00, 0x00,
}
