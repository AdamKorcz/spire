syntax = "proto3";
package spire.api.entry.v1;
option go_package = "github.com/spiffe/spire/proto/spire/next/api/entry/v1;entry";

import "google/protobuf/empty.proto";
import "spire/next/types/entry.proto";
import "spire/next/types/selector.proto";

// Manages registration entries stored by the SPIRE Server.
service Entry {
    // Lists entries.
    rpc ListEntries(ListEntriesRequest) returns (ListEntriesResponse);

    // Gets an entry. If the entry does not exist, NOT_FOUND is returned.
    rpc GetEntry(GetEntryRequest) returns (spire.types.Entry);

    // Creates an entry. If a similar already exists, ALREADY_EXISTS is
    // returned.  An entry is similar if it has the same spiffe_id, parent_id,
    // and selectors.
    rpc CreateEntry(CreateEntryRequest) returns (spire.types.Entry);

    // Batch creates one or more entries.
    rpc BatchCreateEntry(BatchCreateEntryRequest) returns (BatchCreateEntryResponse);

    // Creates an entry if a similar entry does not already exist. An entry is
    // similar if it has the same spiffe_id, parent_id, and selectors.
    rpc CreateEntryIfNotExists(CreateEntryIfNotExistsRequest) returns (CreateEntryIfNotExistsResponse);

    // Updates an entry. If the entry does not exist, NOT_FOUND is returned.
    rpc UpdateEntry(UpdateEntryRequest) returns (spire.types.Entry);

    // Batch updates one or more entries.
    rpc BatchUpdateEntry(BatchUpdateEntryRequest) returns (BatchUpdateEntryResponse);

    // Deletes an entry. If the entry does not exist, NOT_FOUND is returned.
    rpc DeleteEntry(DeleteEntryRequest) returns (google.protobuf.Empty);

    // Batch deletes one or more entries.
    rpc BatchDeleteEntry(BatchDeleteEntryRequest) returns (BatchDeleteEntryResponse);
}

message ListEntriesRequest {
    message Filter {
        string by_parent_id = 1;
        spire.types.SelectorMatch by_selectors = 2;
        string by_spiffe_id = 3;
    }

    // Filters the entries returned in the response.
    Filter filter = 1;

    // Masks the entry fields returned in the response.
    spire.types.EntryMask mask = 2;

    // The maximum number of entries to return.
    int32 page_size = 3;

    // The `next_page_token` value obtained from the previous
    // `ListEntriesResponse` message, if any.
    string page_token = 4;
}

message ListEntriesResponse {
    // The list of entries.
    repeated spire.types.Entry entries = 1;

    // The token to use as the value for `page_token` in the next
    // `ListEntriesRequest`.
    string next_page_token = 2;
}

message GetEntryRequest {
    // Required. ID of the entry to get.
    string id = 1;

    // Masks the entry fields returned in the response.
    spire.types.EntryMask mask = 2;
}

message CreateEntryRequest {
    // Required. The entry to be created. The entry ID field is output only,
    // and will be ignored here.
    spire.types.Entry entry = 1;

    // Masks the entry fields returned in the response.
    spire.types.EntryMask mask = 2;
}

message CreateEntryIfNotExistsRequest {
    // Required. The entry to be created. The entry ID field is output only,
    // and will be ignored here.
    spire.types.Entry entry = 1;

    // Masks the entry fields returned in the response.
    spire.types.EntryMask mask = 2;
}

message CreateEntryIfNotExistsResponse {
    // Either the preexisting or the newly created entry (see the preexisting
    // field).
    spire.types.Entry entry = 1;

    // If true, entry is a preexisting entry. If false, entry is the newly
    // created entry.
    bool preexisting = 2;
}


message BatchCreateEntryRequest {
    // The entries to be created. The entry ID field is output only, and will
    // be ignored here.
    repeated spire.types.Entry entries = 1;

    // Masks the entry fields returned in the response.
    spire.types.EntryMask mask = 2;
}

message BatchCreateEntryResponse {
    message Result {
        // The status of creating the entry.
        google.rpc.Status status = 1;

        // The entry that was created. If the status is OK, it will be the
        // entry that was created. If it the status is ALREADY_EXISTS, it will
        // be the similar entry that already exists. See CreateEntryIfNotExists
        // for details on what constitutes a similar entry. If the status is
        // any other value, this field will not be set.
        spire.types.Entry entry = 2;
    }

    // Result for each entry in the request.
    repeated Result results = 1;
}

message UpdateEntryRequest {
    // Required. The updated entry.
    spire.types.Entry entry = 1;

    // An input mask indicating what entry fields should be updated.
    spire.types.EntryMask input_mask = 2;

    // An output mask indicating what entry fields are set in the response.
    spire.types.EntryMask output_mask = 3;
}

message BatchUpdateEntryRequest {
    // The entries to be updated. The entry ID field is output only, and will
    // be ignored here.
    repeated spire.types.Entry entries = 1;

    // An input mask indicating what entry fields should be updated.
    // TODO: should this be per-entry?
    spire.types.EntryMask input_mask = 2;

    // An output mask indicating what entry fields are set in the response.
    // TODO: should this be per-entry?
    spire.types.EntryMask output_mask = 3;
}

message BatchUpdateEntryResponse {
    message Result {
        // The status of creating the entry.
        google.rpc.Status status = 1;

        // The entry that was updated. If the status is OK, it will be the
        // entry that was updated. If the status is any other value, this field
        // will not be set.
        spire.types.Entry entry = 2;
    }

    // Result for each entry in the request.
    repeated Result results = 1;
}

message DeleteEntryRequest {
    // Required. ID of the entry to delete.
    string id = 1;
}

message BatchDeleteEntryRequest {
    // IDs of the entries to delete.
    repeated string ids = 1;
}

message BatchDeleteEntryResponse {
    message Result {
        // The status of creating the entry.
        google.rpc.Status status = 1;

        // The ID of the entry that was deleted.
        string id = 2;
    }

    // Result for each entry in the request.
    repeated Result results = 1;
}
