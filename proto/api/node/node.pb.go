// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * Trust domain bundle
type Bundle struct {
	// bundle identifier, i.e. the SPIFFE ID for the trust domain
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// bundle data (ASN.1 encoded X.509 certificates)
	CaCerts              []byte   `protobuf:"bytes,2,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{0}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bundle) GetCaCerts() []byte {
	if m != nil {
		return m.CaCerts
	}
	return nil
}

// A type which contains the "Spiffe Verifiable Identity Document" and
// a TTL indicating when the SVID expires.
type X509SVID struct {
	// X509 SVID (ASN.1 encoding)
	DEPRECATEDCert []byte `protobuf:"bytes,1,opt,name=DEPRECATED_cert,json=DEPRECATEDCert,proto3" json:"DEPRECATED_cert,omitempty"`
	// X509 SVID and intermediates necessary to form a chain of trust back
	// to a root CA in the bundle.
	CertChain []byte `protobuf:"bytes,3,opt,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	// SVID expiration timestamp (in seconds since Unix epoch)
	ExpiresAt            int64    `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVID) Reset()         { *m = X509SVID{} }
func (m *X509SVID) String() string { return proto.CompactTextString(m) }
func (*X509SVID) ProtoMessage()    {}
func (*X509SVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{1}
}
func (m *X509SVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVID.Unmarshal(m, b)
}
func (m *X509SVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVID.Marshal(b, m, deterministic)
}
func (dst *X509SVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVID.Merge(dst, src)
}
func (m *X509SVID) XXX_Size() int {
	return xxx_messageInfo_X509SVID.Size(m)
}
func (m *X509SVID) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVID.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVID proto.InternalMessageInfo

func (m *X509SVID) GetDEPRECATEDCert() []byte {
	if m != nil {
		return m.DEPRECATEDCert
	}
	return nil
}

func (m *X509SVID) GetCertChain() []byte {
	if m != nil {
		return m.CertChain
	}
	return nil
}

func (m *X509SVID) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// A message returned by the Spire Server, which includes a map of signed SVIDs and
// a list of all current Registration Entries which are relevant to the caller SPIFFE ID.
type X509SVIDUpdate struct {
	// A map containing SVID values and corresponding SPIFFE IDs as the
	// keys. Map[SPIFFE_ID] => SVID.
	Svids map[string]*X509SVID `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DEPRECATED. Latest SPIRE Server bundle.
	DEPRECATEDBundle []byte `protobuf:"bytes,2,opt,name=DEPRECATED_bundle,json=DEPRECATEDBundle,proto3" json:"DEPRECATED_bundle,omitempty"`
	// A type representing a curated record that the Spire Server uses to set up
	// and manage the various registered nodes and workloads that are controlled by it.
	RegistrationEntries []*common.RegistrationEntry `protobuf:"bytes,3,rep,name=registration_entries,json=registrationEntries,proto3" json:"registration_entries,omitempty"`
	// DEPRECATED. See bundles.
	DEPRECATEDBundles map[string]*Bundle `protobuf:"bytes,4,rep,name=DEPRECATED_bundles,json=DEPRECATEDBundles,proto3" json:"DEPRECATED_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Trust bundles associated with the SVIDs, keyed by trust domain SPIFFE
	// ID. Bundles included are the trust bundle for the server trust domain
	// and any federated trust domain bundles applicable to the SVIDs.
	// Supersedes the deprecated `bundle` field.
	Bundles              map[string]*common.Bundle `protobuf:"bytes,5,rep,name=bundles,proto3" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *X509SVIDUpdate) Reset()         { *m = X509SVIDUpdate{} }
func (m *X509SVIDUpdate) String() string { return proto.CompactTextString(m) }
func (*X509SVIDUpdate) ProtoMessage()    {}
func (*X509SVIDUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{2}
}
func (m *X509SVIDUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDUpdate.Unmarshal(m, b)
}
func (m *X509SVIDUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDUpdate.Marshal(b, m, deterministic)
}
func (dst *X509SVIDUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDUpdate.Merge(dst, src)
}
func (m *X509SVIDUpdate) XXX_Size() int {
	return xxx_messageInfo_X509SVIDUpdate.Size(m)
}
func (m *X509SVIDUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDUpdate proto.InternalMessageInfo

func (m *X509SVIDUpdate) GetSvids() map[string]*X509SVID {
	if m != nil {
		return m.Svids
	}
	return nil
}

func (m *X509SVIDUpdate) GetDEPRECATEDBundle() []byte {
	if m != nil {
		return m.DEPRECATEDBundle
	}
	return nil
}

func (m *X509SVIDUpdate) GetRegistrationEntries() []*common.RegistrationEntry {
	if m != nil {
		return m.RegistrationEntries
	}
	return nil
}

func (m *X509SVIDUpdate) GetDEPRECATEDBundles() map[string]*Bundle {
	if m != nil {
		return m.DEPRECATEDBundles
	}
	return nil
}

func (m *X509SVIDUpdate) GetBundles() map[string]*common.Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// JSR is a JWT SVID signing request.
type JSR struct {
	// SPIFFE ID of the workload
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// List of intended audience
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	// Time-to-live in seconds. If unspecified the JWT SVID will be assigned
	// a default time-to-live by the server.
	Ttl                  int32    `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JSR) Reset()         { *m = JSR{} }
func (m *JSR) String() string { return proto.CompactTextString(m) }
func (*JSR) ProtoMessage()    {}
func (*JSR) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{3}
}
func (m *JSR) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JSR.Unmarshal(m, b)
}
func (m *JSR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JSR.Marshal(b, m, deterministic)
}
func (dst *JSR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSR.Merge(dst, src)
}
func (m *JSR) XXX_Size() int {
	return xxx_messageInfo_JSR.Size(m)
}
func (m *JSR) XXX_DiscardUnknown() {
	xxx_messageInfo_JSR.DiscardUnknown(m)
}

var xxx_messageInfo_JSR proto.InternalMessageInfo

func (m *JSR) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *JSR) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *JSR) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// JWTSVID is a signed JWT-SVID with fields lifted out for convenience.
type JWTSVID struct {
	// JWT-SVID JWT token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// SVID expiration timestamp (seconds since Unix epoch)
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// SVID issuance timestamp (seconds since Unix epoch)
	IssuedAt             int64    `protobuf:"varint,3,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTSVID) Reset()         { *m = JWTSVID{} }
func (m *JWTSVID) String() string { return proto.CompactTextString(m) }
func (*JWTSVID) ProtoMessage()    {}
func (*JWTSVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{4}
}
func (m *JWTSVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTSVID.Unmarshal(m, b)
}
func (m *JWTSVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTSVID.Marshal(b, m, deterministic)
}
func (dst *JWTSVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVID.Merge(dst, src)
}
func (m *JWTSVID) XXX_Size() int {
	return xxx_messageInfo_JWTSVID.Size(m)
}
func (m *JWTSVID) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVID.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVID proto.InternalMessageInfo

func (m *JWTSVID) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JWTSVID) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *JWTSVID) GetIssuedAt() int64 {
	if m != nil {
		return m.IssuedAt
	}
	return 0
}

// Represents a request to attest the node.
type AttestRequest struct {
	// A type which contains attestation data for specific platform.
	AttestationData *common.AttestationData `protobuf:"bytes,1,opt,name=attestation_data,json=attestationData,proto3" json:"attestation_data,omitempty"`
	// Certificate signing request.
	Csr []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	// Attestation challenge response
	Response             []byte   `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestRequest) Reset()         { *m = AttestRequest{} }
func (m *AttestRequest) String() string { return proto.CompactTextString(m) }
func (*AttestRequest) ProtoMessage()    {}
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{5}
}
func (m *AttestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestRequest.Unmarshal(m, b)
}
func (m *AttestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestRequest.Marshal(b, m, deterministic)
}
func (dst *AttestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestRequest.Merge(dst, src)
}
func (m *AttestRequest) XXX_Size() int {
	return xxx_messageInfo_AttestRequest.Size(m)
}
func (m *AttestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestRequest proto.InternalMessageInfo

func (m *AttestRequest) GetAttestationData() *common.AttestationData {
	if m != nil {
		return m.AttestationData
	}
	return nil
}

func (m *AttestRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *AttestRequest) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

// Represents a response that contains  map of signed SVIDs and an array of
// all current Registration Entries which are relevant to the caller SPIFFE ID
type AttestResponse struct {
	// It includes a map of signed SVIDs and an array of all current
	// Registration Entries which are relevant to the caller SPIFFE ID.
	SvidUpdate *X509SVIDUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate,proto3" json:"svid_update,omitempty"`
	// This is a challenge issued by the server to the node. If populated, the
	// node is expected to respond with another AttestRequest with the response.
	// This field is mutually exclusive with the update field.
	Challenge            []byte   `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestResponse) Reset()         { *m = AttestResponse{} }
func (m *AttestResponse) String() string { return proto.CompactTextString(m) }
func (*AttestResponse) ProtoMessage()    {}
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{6}
}
func (m *AttestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestResponse.Unmarshal(m, b)
}
func (m *AttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestResponse.Marshal(b, m, deterministic)
}
func (dst *AttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestResponse.Merge(dst, src)
}
func (m *AttestResponse) XXX_Size() int {
	return xxx_messageInfo_AttestResponse.Size(m)
}
func (m *AttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestResponse proto.InternalMessageInfo

func (m *AttestResponse) GetSvidUpdate() *X509SVIDUpdate {
	if m != nil {
		return m.SvidUpdate
	}
	return nil
}

func (m *AttestResponse) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// Represents an evict request
type EvictRequest struct {
	// Core identity of the agent to be de-attested.
	// For example: "spiffe://example.org/spire/agent/join_token/feea6adc-3254-4052-9a18-5eeb74bf214f"
	SpiffeID             string   `protobuf:"bytes,1,opt,name=spiffeID,proto3" json:"spiffeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvictRequest) Reset()         { *m = EvictRequest{} }
func (m *EvictRequest) String() string { return proto.CompactTextString(m) }
func (*EvictRequest) ProtoMessage()    {}
func (*EvictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{7}
}
func (m *EvictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictRequest.Unmarshal(m, b)
}
func (m *EvictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictRequest.Marshal(b, m, deterministic)
}
func (dst *EvictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictRequest.Merge(dst, src)
}
func (m *EvictRequest) XXX_Size() int {
	return xxx_messageInfo_EvictRequest.Size(m)
}
func (m *EvictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvictRequest proto.InternalMessageInfo

func (m *EvictRequest) GetSpiffeID() string {
	if m != nil {
		return m.SpiffeID
	}
	return ""
}

// Represents an evict response
type EvictResponse struct {
	// If the entry is successfully deleted, deleteSucceed will be true
	DeleteSucceed        bool     `protobuf:"varint,1,opt,name=deleteSucceed,proto3" json:"deleteSucceed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvictResponse) Reset()         { *m = EvictResponse{} }
func (m *EvictResponse) String() string { return proto.CompactTextString(m) }
func (*EvictResponse) ProtoMessage()    {}
func (*EvictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{8}
}
func (m *EvictResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictResponse.Unmarshal(m, b)
}
func (m *EvictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictResponse.Marshal(b, m, deterministic)
}
func (dst *EvictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictResponse.Merge(dst, src)
}
func (m *EvictResponse) XXX_Size() int {
	return xxx_messageInfo_EvictResponse.Size(m)
}
func (m *EvictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvictResponse proto.InternalMessageInfo

func (m *EvictResponse) GetDeleteSucceed() bool {
	if m != nil {
		return m.DeleteSucceed
	}
	return false
}

// Represents a request with a list of CSR.
type FetchX509SVIDRequest struct {
	// A list of CSRs
	Csrs                 [][]byte `protobuf:"bytes,2,rep,name=csrs,proto3" json:"csrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchX509SVIDRequest) Reset()         { *m = FetchX509SVIDRequest{} }
func (m *FetchX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*FetchX509SVIDRequest) ProtoMessage()    {}
func (*FetchX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{9}
}
func (m *FetchX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchX509SVIDRequest.Unmarshal(m, b)
}
func (m *FetchX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchX509SVIDRequest.Marshal(b, m, deterministic)
}
func (dst *FetchX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchX509SVIDRequest.Merge(dst, src)
}
func (m *FetchX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_FetchX509SVIDRequest.Size(m)
}
func (m *FetchX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchX509SVIDRequest proto.InternalMessageInfo

func (m *FetchX509SVIDRequest) GetCsrs() [][]byte {
	if m != nil {
		return m.Csrs
	}
	return nil
}

// Represents a response that contains  map of signed SVIDs and an array
// of all current Registration Entries which are relevant to the caller SPIFFE ID.
type FetchX509SVIDResponse struct {
	// It includes a map of signed SVIDs and an array of all current Registration
	// Entries which are relevant to the caller SPIFFE ID.
	SvidUpdate           *X509SVIDUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate,proto3" json:"svid_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FetchX509SVIDResponse) Reset()         { *m = FetchX509SVIDResponse{} }
func (m *FetchX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*FetchX509SVIDResponse) ProtoMessage()    {}
func (*FetchX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{10}
}
func (m *FetchX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchX509SVIDResponse.Unmarshal(m, b)
}
func (m *FetchX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchX509SVIDResponse.Marshal(b, m, deterministic)
}
func (dst *FetchX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchX509SVIDResponse.Merge(dst, src)
}
func (m *FetchX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_FetchX509SVIDResponse.Size(m)
}
func (m *FetchX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchX509SVIDResponse proto.InternalMessageInfo

func (m *FetchX509SVIDResponse) GetSvidUpdate() *X509SVIDUpdate {
	if m != nil {
		return m.SvidUpdate
	}
	return nil
}

type FetchJWTSVIDRequest struct {
	// The JWT signing request
	Jsr                  *JSR     `protobuf:"bytes,1,opt,name=jsr,proto3" json:"jsr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchJWTSVIDRequest) Reset()         { *m = FetchJWTSVIDRequest{} }
func (m *FetchJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*FetchJWTSVIDRequest) ProtoMessage()    {}
func (*FetchJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{11}
}
func (m *FetchJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchJWTSVIDRequest.Unmarshal(m, b)
}
func (m *FetchJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (dst *FetchJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchJWTSVIDRequest.Merge(dst, src)
}
func (m *FetchJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_FetchJWTSVIDRequest.Size(m)
}
func (m *FetchJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchJWTSVIDRequest proto.InternalMessageInfo

func (m *FetchJWTSVIDRequest) GetJsr() *JSR {
	if m != nil {
		return m.Jsr
	}
	return nil
}

type FetchJWTSVIDResponse struct {
	// The signed JWT-SVID
	Svid                 *JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchJWTSVIDResponse) Reset()         { *m = FetchJWTSVIDResponse{} }
func (m *FetchJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*FetchJWTSVIDResponse) ProtoMessage()    {}
func (*FetchJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{12}
}
func (m *FetchJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchJWTSVIDResponse.Unmarshal(m, b)
}
func (m *FetchJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (dst *FetchJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchJWTSVIDResponse.Merge(dst, src)
}
func (m *FetchJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_FetchJWTSVIDResponse.Size(m)
}
func (m *FetchJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchJWTSVIDResponse proto.InternalMessageInfo

func (m *FetchJWTSVIDResponse) GetSvid() *JWTSVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

// List response
type ListResponse struct {
	// List of all attested nodes
	Nodes                []*common.AttestedNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_b13853bd4d2b1a28, []int{13}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (dst *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(dst, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetNodes() []*common.AttestedNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Bundle)(nil), "spire.api.node.Bundle")
	proto.RegisterType((*X509SVID)(nil), "spire.api.node.X509SVID")
	proto.RegisterType((*X509SVIDUpdate)(nil), "spire.api.node.X509SVIDUpdate")
	proto.RegisterMapType((map[string]*common.Bundle)(nil), "spire.api.node.X509SVIDUpdate.BundlesEntry")
	proto.RegisterMapType((map[string]*Bundle)(nil), "spire.api.node.X509SVIDUpdate.DEPRECATEDBundlesEntry")
	proto.RegisterMapType((map[string]*X509SVID)(nil), "spire.api.node.X509SVIDUpdate.SvidsEntry")
	proto.RegisterType((*JSR)(nil), "spire.api.node.JSR")
	proto.RegisterType((*JWTSVID)(nil), "spire.api.node.JWTSVID")
	proto.RegisterType((*AttestRequest)(nil), "spire.api.node.AttestRequest")
	proto.RegisterType((*AttestResponse)(nil), "spire.api.node.AttestResponse")
	proto.RegisterType((*EvictRequest)(nil), "spire.api.node.EvictRequest")
	proto.RegisterType((*EvictResponse)(nil), "spire.api.node.EvictResponse")
	proto.RegisterType((*FetchX509SVIDRequest)(nil), "spire.api.node.FetchX509SVIDRequest")
	proto.RegisterType((*FetchX509SVIDResponse)(nil), "spire.api.node.FetchX509SVIDResponse")
	proto.RegisterType((*FetchJWTSVIDRequest)(nil), "spire.api.node.FetchJWTSVIDRequest")
	proto.RegisterType((*FetchJWTSVIDResponse)(nil), "spire.api.node.FetchJWTSVIDResponse")
	proto.RegisterType((*ListResponse)(nil), "spire.api.node.ListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Attest the node, get base node SVID.
	Attest(ctx context.Context, opts ...grpc.CallOption) (Node_AttestClient, error)
	// Evict removes (de-attest) an attestation entry from the attested nodes store
	Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*EvictResponse, error)
	// List all attested nodes
	List(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	// Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// Base Node SVID or the Registered Node SVID used for this call)
	// List can be empty to allow Node Agent cache refresh).
	FetchX509SVID(ctx context.Context, opts ...grpc.CallOption) (Node_FetchX509SVIDClient, error)
	// Fetches a signed JWT-SVID for a workload intended for a specific audience.
	FetchJWTSVID(ctx context.Context, in *FetchJWTSVIDRequest, opts ...grpc.CallOption) (*FetchJWTSVIDResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Attest(ctx context.Context, opts ...grpc.CallOption) (Node_AttestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/spire.api.node.Node/Attest", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAttestClient{stream}
	return x, nil
}

type Node_AttestClient interface {
	Send(*AttestRequest) error
	Recv() (*AttestResponse, error)
	grpc.ClientStream
}

type nodeAttestClient struct {
	grpc.ClientStream
}

func (x *nodeAttestClient) Send(m *AttestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAttestClient) Recv() (*AttestResponse, error) {
	m := new(AttestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*EvictResponse, error) {
	out := new(EvictResponse)
	err := c.cc.Invoke(ctx, "/spire.api.node.Node/Evict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) List(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/spire.api.node.Node/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchX509SVID(ctx context.Context, opts ...grpc.CallOption) (Node_FetchX509SVIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/spire.api.node.Node/FetchX509SVID", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeFetchX509SVIDClient{stream}
	return x, nil
}

type Node_FetchX509SVIDClient interface {
	Send(*FetchX509SVIDRequest) error
	Recv() (*FetchX509SVIDResponse, error)
	grpc.ClientStream
}

type nodeFetchX509SVIDClient struct {
	grpc.ClientStream
}

func (x *nodeFetchX509SVIDClient) Send(m *FetchX509SVIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeFetchX509SVIDClient) Recv() (*FetchX509SVIDResponse, error) {
	m := new(FetchX509SVIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) FetchJWTSVID(ctx context.Context, in *FetchJWTSVIDRequest, opts ...grpc.CallOption) (*FetchJWTSVIDResponse, error) {
	out := new(FetchJWTSVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.node.Node/FetchJWTSVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Attest the node, get base node SVID.
	Attest(Node_AttestServer) error
	// Evict removes (de-attest) an attestation entry from the attested nodes store
	Evict(context.Context, *EvictRequest) (*EvictResponse, error)
	// List all attested nodes
	List(context.Context, *common.Empty) (*ListResponse, error)
	// Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// Base Node SVID or the Registered Node SVID used for this call)
	// List can be empty to allow Node Agent cache refresh).
	FetchX509SVID(Node_FetchX509SVIDServer) error
	// Fetches a signed JWT-SVID for a workload intended for a specific audience.
	FetchJWTSVID(context.Context, *FetchJWTSVIDRequest) (*FetchJWTSVIDResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Attest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Attest(&nodeAttestServer{stream})
}

type Node_AttestServer interface {
	Send(*AttestResponse) error
	Recv() (*AttestRequest, error)
	grpc.ServerStream
}

type nodeAttestServer struct {
	grpc.ServerStream
}

func (x *nodeAttestServer) Send(m *AttestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAttestServer) Recv() (*AttestRequest, error) {
	m := new(AttestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_Evict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Evict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.node.Node/Evict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Evict(ctx, req.(*EvictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.node.Node/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).List(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchX509SVID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).FetchX509SVID(&nodeFetchX509SVIDServer{stream})
}

type Node_FetchX509SVIDServer interface {
	Send(*FetchX509SVIDResponse) error
	Recv() (*FetchX509SVIDRequest, error)
	grpc.ServerStream
}

type nodeFetchX509SVIDServer struct {
	grpc.ServerStream
}

func (x *nodeFetchX509SVIDServer) Send(m *FetchX509SVIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeFetchX509SVIDServer) Recv() (*FetchX509SVIDRequest, error) {
	m := new(FetchX509SVIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_FetchJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.node.Node/FetchJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchJWTSVID(ctx, req.(*FetchJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evict",
			Handler:    _Node_Evict_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Node_List_Handler,
		},
		{
			MethodName: "FetchJWTSVID",
			Handler:    _Node_FetchJWTSVID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attest",
			Handler:       _Node_Attest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchX509SVID",
			Handler:       _Node_FetchX509SVID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_node_b13853bd4d2b1a28) }

var fileDescriptor_node_b13853bd4d2b1a28 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xed, 0x6f, 0xdb, 0x44,
	0x18, 0x97, 0xeb, 0xb8, 0x4d, 0x9e, 0xa6, 0x59, 0x77, 0x09, 0x23, 0x98, 0x65, 0x54, 0xa6, 0x13,
	0xa1, 0x45, 0x4e, 0xc9, 0x54, 0x89, 0x21, 0xa4, 0x91, 0x25, 0x41, 0xac, 0x20, 0x54, 0x5d, 0x06,
	0x8c, 0x17, 0x29, 0x5c, 0xed, 0x5b, 0x73, 0x2c, 0xb1, 0x33, 0xdf, 0xb9, 0xa2, 0x9f, 0xf9, 0xc0,
	0x67, 0xfe, 0x63, 0x74, 0x2f, 0x4e, 0x62, 0x27, 0x5d, 0xbe, 0xf0, 0xa9, 0xbe, 0xdf, 0xf3, 0x7b,
	0x7e, 0xcf, 0x7b, 0x15, 0x80, 0x28, 0x0e, 0xa9, 0x3f, 0x4f, 0x62, 0x11, 0xa3, 0x1a, 0x9f, 0xb3,
	0x84, 0xfa, 0x64, 0xce, 0x7c, 0x89, 0xba, 0x9f, 0x5f, 0x33, 0x31, 0x49, 0xaf, 0xfc, 0x20, 0x9e,
	0x75, 0xf8, 0x9c, 0xbd, 0x7e, 0x4d, 0x3b, 0x8a, 0xd1, 0x51, 0xf4, 0x4e, 0x10, 0xcf, 0x66, 0x71,
	0x64, 0xfe, 0x68, 0x09, 0xef, 0x09, 0xec, 0x3e, 0x4f, 0xa3, 0x70, 0x4a, 0x51, 0x0d, 0x76, 0x58,
	0xd8, 0xb4, 0x8e, 0xac, 0x76, 0x05, 0xef, 0xb0, 0x10, 0x7d, 0x00, 0xe5, 0x80, 0x8c, 0x03, 0x9a,
	0x08, 0xde, 0xdc, 0x39, 0xb2, 0xda, 0x55, 0xbc, 0x17, 0x90, 0xbe, 0x7c, 0x7a, 0x6f, 0xa1, 0xfc,
	0xea, 0xfc, 0xec, 0xe9, 0xe8, 0xa7, 0x17, 0x03, 0xf4, 0x09, 0xdc, 0x1b, 0x0c, 0x2f, 0xf1, 0xb0,
	0xdf, 0x7b, 0x39, 0x1c, 0x28, 0xba, 0xd2, 0xa8, 0xe2, 0xda, 0x12, 0x96, 0x5e, 0xa8, 0x05, 0x20,
	0xad, 0xe3, 0x60, 0x42, 0x58, 0xd4, 0xb4, 0x15, 0xa7, 0x22, 0x91, 0xbe, 0x04, 0xa4, 0x99, 0xfe,
	0x25, 0x93, 0xe5, 0x63, 0x22, 0x54, 0x40, 0x1b, 0x57, 0x0c, 0xd2, 0x13, 0xde, 0xdf, 0x0e, 0xd4,
	0xb2, 0x98, 0x3f, 0xce, 0x43, 0x22, 0x28, 0x7a, 0x06, 0x0e, 0xbf, 0x61, 0x21, 0x6f, 0x5a, 0x47,
	0x76, 0x7b, 0xbf, 0xfb, 0xa9, 0x9f, 0xef, 0x86, 0x9f, 0xa7, 0xfb, 0x23, 0xc9, 0x1d, 0x46, 0x22,
	0xb9, 0xc5, 0xda, 0x0f, 0x9d, 0xc2, 0xfd, 0x95, 0xd4, 0xaf, 0x54, 0x1b, 0x4c, 0xa9, 0x87, 0x4b,
	0x83, 0x69, 0x0f, 0x86, 0x46, 0x42, 0xaf, 0x19, 0x17, 0x09, 0x11, 0x2c, 0x8e, 0xc6, 0x34, 0x12,
	0x09, 0xa3, 0xbc, 0x69, 0xab, 0xe0, 0x1f, 0x99, 0xe0, 0xa6, 0xb7, 0x78, 0x85, 0xa9, 0x43, 0xd6,
	0x93, 0x02, 0xc4, 0x28, 0x47, 0x21, 0xa0, 0xb5, 0x04, 0x78, 0xb3, 0xa4, 0x14, 0xcf, 0xb7, 0x94,
	0x53, 0x4c, 0xd0, 0x94, 0x76, 0x7f, 0x0d, 0x47, 0x43, 0xd8, 0xcb, 0xa4, 0x1d, 0x25, 0x7d, 0xba,
	0x45, 0x3a, 0x27, 0x98, 0xf9, 0xba, 0x18, 0x60, 0xd9, 0x42, 0x74, 0x08, 0xf6, 0x1b, 0x7a, 0x6b,
	0xd6, 0x45, 0x7e, 0x22, 0x1f, 0x9c, 0x1b, 0x32, 0x4d, 0x75, 0x07, 0xf7, 0xbb, 0xcd, 0xbb, 0x82,
	0x60, 0x4d, 0xfb, 0x72, 0xe7, 0x0b, 0xcb, 0xfd, 0x1d, 0x1e, 0x6c, 0xae, 0x63, 0x83, 0xfe, 0x67,
	0x79, 0xfd, 0x07, 0x45, 0x7d, 0xed, 0xbe, 0xaa, 0x7e, 0x09, 0xd5, 0x2d, 0x9a, 0x27, 0x79, 0xcd,
	0x46, 0x7e, 0x8a, 0x6b, 0x8a, 0xde, 0x25, 0xd8, 0x17, 0x23, 0x8c, 0x3e, 0x84, 0x8a, 0x3e, 0xaf,
	0xf1, 0xe2, 0x62, 0xca, 0x1a, 0x78, 0x11, 0x22, 0x17, 0xca, 0x24, 0x0d, 0x19, 0x8d, 0x02, 0x29,
	0x6b, 0x4b, 0x5b, 0xf6, 0x96, 0x19, 0x08, 0x31, 0x55, 0xcb, 0xef, 0x60, 0xf9, 0xe9, 0xfd, 0x06,
	0x7b, 0x17, 0x3f, 0xbf, 0x54, 0x97, 0xd4, 0x00, 0x47, 0xc4, 0x6f, 0x68, 0x64, 0x14, 0xf5, 0x63,
	0xcb, 0x5d, 0xc8, 0x54, 0x18, 0xe7, 0x29, 0x0d, 0xa5, 0xd5, 0x56, 0xd6, 0xb2, 0x06, 0x7a, 0xc2,
	0xfb, 0xc7, 0x82, 0x83, 0x9e, 0x10, 0x94, 0x0b, 0x4c, 0xdf, 0xa6, 0x94, 0x0b, 0xf4, 0x2d, 0x1c,
	0x12, 0x05, 0xe8, 0x25, 0x0e, 0x89, 0x20, 0x2a, 0xdc, 0x7e, 0xb7, 0x95, 0xaf, 0xbd, 0xb7, 0x64,
	0x0d, 0x88, 0x20, 0xf8, 0x1e, 0xc9, 0x03, 0xb2, 0x94, 0x80, 0x27, 0xe6, 0x5c, 0xe4, 0xa7, 0x2c,
	0x3c, 0xa1, 0x7c, 0x1e, 0x47, 0x9c, 0x9a, 0xf3, 0x5e, 0xbc, 0xbd, 0x18, 0x6a, 0x59, 0x22, 0x1a,
	0x41, 0xcf, 0x60, 0x5f, 0x5e, 0xe1, 0x38, 0x55, 0x3b, 0x67, 0x92, 0x78, 0xf4, 0xee, 0xcd, 0xc4,
	0x20, 0x5d, 0xcc, 0xf9, 0x3f, 0x84, 0x4a, 0x30, 0x21, 0xd3, 0x29, 0x8d, 0xae, 0xb3, 0xab, 0x5d,
	0x02, 0xde, 0x09, 0x54, 0x87, 0x37, 0x2c, 0x58, 0x14, 0xee, 0x42, 0x36, 0xa1, 0x41, 0x61, 0x62,
	0x03, 0xef, 0x1c, 0x0e, 0x0c, 0xd7, 0xe4, 0x76, 0x0c, 0x07, 0x21, 0x9d, 0x52, 0x41, 0x47, 0x69,
	0x10, 0x50, 0xaa, 0x67, 0x5c, 0xc6, 0x79, 0xd0, 0x3b, 0x81, 0xc6, 0x37, 0x54, 0x04, 0x93, 0xc5,
	0x62, 0x9b, 0x50, 0x08, 0x4a, 0x01, 0x4f, 0xb8, 0x1a, 0x7e, 0x15, 0xab, 0x6f, 0xef, 0x15, 0xbc,
	0x57, 0xe0, 0xfe, 0x4f, 0x6d, 0xf0, 0xbe, 0x82, 0xba, 0x52, 0x36, 0x5b, 0x94, 0x25, 0xf1, 0x18,
	0xec, 0x3f, 0x79, 0x62, 0xf4, 0xea, 0x45, 0xbd, 0x8b, 0x11, 0xc6, 0xd2, 0xee, 0xf5, 0x4d, 0x0d,
	0x0b, 0x6f, 0x93, 0xd6, 0x29, 0x94, 0x64, 0x0c, 0xe3, 0xff, 0xfe, 0x9a, 0xbf, 0xa1, 0x2b, 0x92,
	0xf7, 0x35, 0x54, 0xbf, 0x67, 0x2b, 0xa3, 0x3d, 0x03, 0x47, 0xb2, 0xb2, 0x7f, 0xcc, 0xee, 0xa6,
	0xcd, 0xa2, 0xe1, 0x0f, 0x71, 0x48, 0xb1, 0x26, 0x76, 0xff, 0xb5, 0xa1, 0x24, 0xdf, 0xe8, 0x3b,
	0xd8, 0xd5, 0x76, 0xd4, 0x2a, 0xc6, 0xcc, 0x2d, 0xb2, 0xfb, 0xe8, 0x2e, 0xb3, 0xce, 0xa1, 0x6d,
	0x9d, 0x59, 0x68, 0x00, 0x8e, 0x9a, 0x2b, 0x7a, 0x58, 0x24, 0xaf, 0xae, 0x86, 0xdb, 0xba, 0xc3,
	0x6a, 0xaa, 0x79, 0x0a, 0x25, 0x59, 0x1d, 0xaa, 0xe7, 0xcb, 0x18, 0xce, 0xe6, 0xe2, 0xd6, 0x5d,
	0x53, 0xce, 0x35, 0xe2, 0x0f, 0x38, 0xc8, 0x4d, 0x1d, 0x1d, 0x17, 0xe9, 0x9b, 0x16, 0xc8, 0x7d,
	0xbc, 0x85, 0xb5, 0x52, 0xe2, 0x2f, 0x50, 0x5d, 0x9d, 0x1f, 0xfa, 0x78, 0xa3, 0x6b, 0x7e, 0x37,
	0xdc, 0xe3, 0x77, 0x93, 0xb4, 0xfc, 0xf3, 0xdd, 0x5f, 0x4b, 0xd2, 0x78, 0xb5, 0xab, 0x7e, 0x28,
	0x3c, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x92, 0xee, 0x5c, 0x1a, 0x79, 0x08, 0x00, 0x00,
}
